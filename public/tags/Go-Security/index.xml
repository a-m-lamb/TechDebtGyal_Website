<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Security on TechDebtCrew</title>
    <link>//localhost:1313/tags/Go-Security/</link>
    <description>Recent content in Go Security on TechDebtCrew</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 08 Mar 2023 06:50:00 -0800</lastBuildDate>
    <atom:link href="//localhost:1313/tags/Go-Security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Diving into the Dependency Forest with Golang</title>
      <link>//localhost:1313/2023/03/diving-into-dependency-forest-with.html</link>
      <pubDate>Wed, 08 Mar 2023 06:50:00 -0800</pubDate>
      <guid>//localhost:1313/2023/03/diving-into-dependency-forest-with.html</guid>
      <description>So, this is the first post of what I foresee to be an entire chapter of working with Go as it relates to remediating vulnerabilities. This particular post will focus on patching vulnerabilities related to Software Composition Analysis- an important task to perform regularly in order to avoid a lot of technical debt later on (Seriously, Handle it now!).&#xA;Programs are made up of numerous components--elements that can go unnoticed because many developers carelessly import dependencies without being aware of vulnerabilities that might exist within them.</description>
    </item>
  </channel>
</rss>
